
import scanpy as sc
import scvi
from matplotlib import pyplot as plt
import numpy as np
import pandas as pd

Q_OBJ_PREFIX = "filtered"
SOFT_Q_LAB = Q_OBJ_PREFIX + "_soft" + "scvi" + ".tsv"
LATENT_ID = "X_" + "scvi" + "_" + "scvi"

scvi.settings.seed = 0 

adata_query = sc.read_h5ad(Q_OBJ)
lab_exists = "labels_scanvi" in adata_query.obs
if lab_exists:
    labels = adata_query.obs["labels_scanvi"]
adata_query.obs["labels_scanvi"] = "Unknown"

scvi.model.SCANVI.prepare_query_anndata(
    adata_query, 
    "scvi_model"
) 
vae_q = scvi.model.SCANVI.load_query_data(
    adata_query,
    "scvi_model"
)

vae_q.train(
    max_epochs=100,
    plan_kwargs={"weight_decay": 0.0}, 
    check_val_every_n_epoch=10
)

labels_hard = vae_q.predict()
labels_soft = vae_q.predict(soft = True)

adata_query.obsm[LATENT_ID] = vae_q.get_latent_representation()
adata_query.obs["scvi"] = labels_hard

if lab_exists:
    adata_query.obs["labels_scanvi"] = labels
adata_query.write_h5ad(Q_OBJ_PREFIX + "_scvi.h5ad")
labels_soft.to_csv(SOFT_Q_LAB, sep = "\t")

# plot UMAP
adata_full = adata_query.concatenate(adata_ref)

adata_full.obs['batch'] = adata_full.obs.batch.cat.rename_categories(["Query", "Reference"])

sc.pp.neighbors(adata_full, use_rep=LATENT_ID)
sc.tl.umap(adata_full, min_dist=0.3)

plt = sc.pl.umap(
    adata_full,
    color=["batch"],
    frameon=False,
    show=False
)
plt.savefig(DIR + "/UMAP_all_" + REDUCT_NAME + "_" + BROAD_META + ".pdf", format="pdf", bbox_inches='tight')

plt = sc.pl.umap(
    adata_full,
    frameon=False,
    show=False
)
plt = sc.pl.umap(
    adata_full[: adata_query.n_obs],
    color=["Sample name"],
    frameon=False,
    ax=ax
)
plt.savefig(DIR + "/UMAP_query_" + REDUCT_NAME + "_" + BROAD_META + ".pdf", format="pdf", bbox_inches='tight')
plt.close()

categories = np.unique(adata_full.obs[BROAD_META])
for c in categories:

	if sum(adata_full.obs[BROAD_META] == c) > MIN_CELLS:

		plt = sc.pl.umap(
		    adata_full,
		    frameon=False,
		    show=False
		)
		plt = sc.pl.umap(
		    adata_full[adata_full.obs[BROAD_META] == c],
		    color=[FINE_META],
		    frameon=False,
		    ax = ax
		    )
		plt.savefig(DIR + "/UMAP_all_" + REDUCT_NAME + "_" + c + ".pdf", format="pdf", bbox_inches='tight')
		plt.close()
	
		plt = sc.pl.umap(
		    adata_full,
		    frameon=False,
		    show=False
		    )
		plt = sc.pl.umap(
	    	adata_full[(adata_full.obs[BROAD_META] == c) & (adata_full.obs["batch"] == "Query")],
	    	    color=[FINE_META],
	    	    frameon=False,
	    	    ax=ax
		)
		plt.savefig(DIR + "/UMAP_query_" + REDUCT_NAME + "_" + c + ".pdf", format="pdf", bbox_inches='tight')
		plt.close()

STAT_Q = "query.tsv"
STAT_R = "reference.tsv"
CELLS = "matched_cells.txt"
META = ["category", "Integrated_05"]

stat_q = pd.read_csv(STAT_Q, sep="\t")
stat_r = pd.read_csv(STAT_R, sep="\t")

ref = stat_r[META].drop_duplicates()
def is_match(row):
    return ((ref[META] == row[META].values).all(axis=1)).any()

mask = stat_q.apply(is_match, axis=1)
idx = np.where(mask)[0]

inferred_col = f"{META[0]}_inferred"
if inferred_col not in stat_q.columns:
    map_dict = dict(zip(ref[META[1]], ref[META[0]]))
    stat_q[inferred_col] = stat_q[META[1]].map(map_dict)
    
    stat_q.to_csv(STAT_Q, sep="\t", index=False)

stat_q.iloc[idx]["X"].to_csv(CELLS, index=False, header=False)

c = cells[0].tolist()
adata_query = adata_query[c,:]
adata_query.write_h5ad(Q_OBJ_PREFIX + "_scvi.h5ad")

exit()
